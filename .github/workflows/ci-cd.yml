name: CI-CD

# Trigger pipeline on push to main or pull requests
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Lint and Code Quality
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt  # Installs everything including pytest, flake8, black
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Check code formatting with Black
      run: |
        black --check . || echo "Code formatting issues found (not blocking)"
      continue-on-error: true

  # Job 2: Build and Test
  build:
    name: Build and Test Application
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt  # Installs everything including pytest
    
    - name: Verify imports
      run: |
        python -c "import app; print('‚úÖ Application imports successfully')"
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=term-missing
        continue-on-error: true  # ‚Üê Change false to true to not fail the job on test failures
      env:
        AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT: ${{ secrets.AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT }}
        AZURE_DOCUMENT_INTELLIGENCE_KEY: ${{ secrets.AZURE_DOCUMENT_INTELLIGENCE_KEY }}
      continue-on-error: false

  # Job 3: Docker Build
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t kitabiai:latest .
    
    - name: Test Docker image
      run: |
        docker images | grep kitabiai
        echo "‚úÖ Docker image built successfully"
    
    # Optional: Push to Docker Hub (uncomment when ready)
    # - name: Login to Docker Hub
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    
    # - name: Push Docker image
    #   run: |
    #     docker tag kitabiai:latest ${{ secrets.DOCKER_USERNAME }}/kitabiai:latest
    #     docker push ${{ secrets.DOCKER_USERNAME }}/kitabiai:latest

  # Job 4: Security Scan (Optional but impressive)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'  # Don't fail build on vulnerabilities (yet)
      continue-on-error: true

  # Summary Job
  pipeline-success:
    name: Pipeline Status
    runs-on: ubuntu-latest
    needs: [lint, build, docker, security]
    if: success()
    
    steps:
    - name: Success Message
      run: |
        echo "üéâ All CI/CD checks passed!"
        echo "‚úÖ Code quality verified"
        echo "‚úÖ Application builds successfully"
        echo "‚úÖ Docker image created"
        echo "‚úÖ Security scan completed"